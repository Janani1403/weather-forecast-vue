using Microsoft.EntityFrameworkCore;
using Forecast.Domain.Abstractions;
using Forecast.Domain.Entities;
using Forecast.Persistence.Contexts;
using System.Threading.Tasks;
using System;
using System.Collections.Generic;
using System.Linq;
using Forecast.Core.Exceptions;

namespace Forecast.Persistence.UseCases
{
    public class HistoryPersistence<T> : IHistoryPersistence<T> where T : BaseEntity
    {
        private readonly HistoryContext _context;
        private readonly DbSet<T> _entities;
        public HistoryPersistence(HistoryContext context)
        {
            _context = context;
            _entities = context.Set<T>();
        }
        /// <summary>
        /// Add accessed value to History table
        /// </summary>
        /// <param name="History">Model object</param>
        /// <returns>void</returns>
        /// <exception cref="PersistenceException"></exception>
        public async Task Create(T History)
        {
            try
            {
                _entities.Add(History);
                await _context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                throw new PersistenceException(ex.Message);
            }
        }
        /// <summary>
        /// Get top 10 History values sorted descending by time
        /// </summary>
        /// <param name="userKey">UserKey (autogenerated)</param>
        /// <returns></returns>
        /// <exception cref="PersistenceException"></exception>
        public async Task<IEnumerable<T>> GetAll(string userKey)
        {
            try
            {
                return await Task.FromResult(_entities.Where(x => x.UserKey == userKey).OrderByDescending(x=>x.AccessedDateTime).Take(10).AsEnumerable());
            }
            catch (Exception ex) {
                throw new PersistenceException(ex.Message);
            }
        }
    }
}
